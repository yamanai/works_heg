
<template>
	<div class="wrapper">
		<head-top class="header">
			<i slot="left" @click="goBack" class="iconfont icon-back"></i>
			<div slot="title" class="title">
				<div v-if="getFlightOrder!=null" class="title-detail">
					<span>{{getFlightOrder.departAirport.cityName}}</span>
					<!-- <span class="title-detail-ico"></span> -->
					<span>{{getFlightOrder.destinationAirport.cityName}}</span>
				</div>
				<div class="title-info">
					<span>{{flightTimeRangeString}}</span>
					<span>&bull;</span>
					<span>{{travellerNum}}Traveller</span>
				</div>
			</div>
			<div slot="right" class="next" v-show="true" @click="skipFilter">
				<!-- <img :src="heads.img2" alt=""> -->
				<i class="iconfont icon-filter"></i>
			</div>
		</head-top>
		<loading v-show="showLoad"></loading>
		<mt-popup v-model="showPopup" popup-transition="popup-fade" modal="true" closeOnClickModal="false">
			<failure>
				<div slot="head">Flight unavailable</div>
				<p slot="content">We've really sorry,but the flight you selected is no longer available.please select a different flight</p>
				<mt-button @click="goBack" slot="btn" class="btn" type="default">Ok</mt-button>
			</failure>
		</mt-popup>
		<mt-popup v-model="showPopup2" popup-transition="popup-fade" modal="true" closeOnClickModal="false">
			<failure>
				<div slot="head">Flight unavailable</div>
				<p slot="content">We've really sorry,but the flight you selected is no longer available.please select a different flight</p>
				<mt-button @click="close" slot="btn" class="btn" type="default">Ok</mt-button>
			</failure>
		</mt-popup>
		<transition enter-active-class="slideInRight" leave-active-class="slideOutRight">
			<keep-alive>
				<router-view :filter="onewayFilter" @onFilterSelectFinish="onFilterSelectFinish" class="animated"></router-view>
			</keep-alive>
		</transition>
		<div class="container">
			<div class="tips">
				<ul class="tips-list">
					<li>1.
						<span class="tips-price"></span> cashback will be transferred to your Happy Gold Account when you finished your Flights</li>
					<li>2. The Original Price XXX will still be shown on your ticket</li>
					<li>Happy Gold can be used on your booking at our site, there is no validity and limitation</li>
				</ul>
			</div>
			<div class="con-title">
				<div class="span-wrap flex space-betweens">
					<span v-for='(item,index) in titleList' :key="item.id" :class='{active:sortType==index}' @click='sort(index)'>{{item}}
						<i class="iconfont icon-arrow"></i>
					</span>
				</div>
			</div>
			<div class="flight-info">
				<ul>
					<li class="" :class="{active:this.idx==index}" v-for="(item,index) in displayedFlights" @click="showPay(index)" :key="item.id">
						<div class="flight-content flex space-between align-items-center">
							<div class="flight-time">
								<div class="flight-time-ico">
									<img :src="item.airline.iconPath" />
									<span>{{item.stops[0].flightNumber}}</span>
								</div>
							</div>
							<div class="flight-time-info flex space-between ">
								<div>
									<div class="schedule">
										<span>{{TimeFormatUtil.getDisplayHourAndMinute(item.departDate)}}</span>
										<span> - </span>
										<span>{{TimeFormatUtil.getDisplayHourAndMinute(item.returnDate)}}</span>
									</div>
									<div class="time-cost flex space-between">
										<span>{{(TimeFormatUtil.getDurationDescription(item))}}</span>
										<span>{{(item.stops.length-1==0 ? 'non-stop' : item.stops.length-1+'stop')}}</span>
									</div>
									<div class="city-name flex space-between align-items-center">
										<div class="depart">
											{{item.stops[0].departAirportName}}
										</div>
										<i class="iconfont icon-roundtrip"></i>
										<div class="arrive">
											{{item.stops[0].arrivalAirportName}}
										</div>
									</div>
								</div>
							</div>
							<div class="flight-price">
								<div class="flight-price-detail flex align-items-center">
									<div>
										<h2 class="present-price">
											<span class="rs">RS.</span>
											<span>{{item.bfp+item.gst | formatDate}}</span>
										</h2>
										<h2 class="past-price">
											<span class="rs">RS.</span>
											<span>{{item.obfp+item.gst | formatDate}}</span>
										</h2>
									</div>
								</div>
							</div>
						</div>
						<div class="select-pay" ref="payoption">
							<div class="lower-price flex space-between align-items-center" @click="onFlightItemClick(index)">
								<span class="title">The Lowest Price</span>
								<span class="price">
									<span class="rs">RS.</span>
									{{item.price - item.commonDiscount}}
								</span>
								<span class="back-price sp">
									Crashback:
									<span class="rs">RS.</span>
									{{item.commonDiscount}}
								</span>
								<i class="iconfont icon-go"></i>
							</div>
							<div class="cashback flex space-between align-items-center">
								<span class="title">Cashback Price</span>
								<span class="price">
									<span class="rs">RS.</span>
									{{item.price}}
								</span>
								<span class="back-price">
									Crashback:
	
									<span class="price-color">
										<span class="rs">RS.</span>
										{{item.commonDiscount}}
									</span>
								</span>
								<i class="iconfont icon-go"></i>
							</div>
	
						</div>
					</li>
				</ul>
			</div>
		</div>
	</div>
</template>
<script>
const SORT_BY_TIME = 0;
const SORT_BY_DURATION = 1;
const SORT_BY_PRICE = 2;

import headTop from '../../../components/head/head.vue'
import loading from '../../../components/loading/loading.vue'
import filter from './filter.vue'
import failure from '../../failure/failure.vue'
import { TimeFormatUtil, CabinClassUtil, GetFlightOrderUtil } from '../../../models/utils'
import { Flight, FlightFactory } from '../../../models/flight'
import { bus } from '../../../main.js'
import { mapGetters } from 'vuex'
import { Toast, Indicator, Button, Popup } from 'mint-ui';
import { OnewayFilter } from '../../../models/filter'
import { OnewayOrder, RoundTripOrder } from '../../../models/flightorder'


import { Passenger, Adult, Child, Infant } from '../../../models/passenger'
import * as XFlight from '../../../vuex/models/flight/XFlight.js'
import * as mutationNames from '../../../vuex/models/flightorder/MutationName.js'
import { OnewayDiscountManager, DiscountItem, OnewayCompanyDiscountPolicy, OnewayLadderDiscountPolicy }
	from '../../../models/aboutdiscount'
import { Coupon } from '../../../models/discount'

var _discountManager = null

export default {
	components: {
		headTop,
		loading,
		failure
	},
	data() {
		return {
			sortType: SORT_BY_PRICE,
			idx: '-1',
			showFilte: false,
			showLoad: false,
			showPopup: false,
			showPopup2: false,
			isPrice: true,
			isTime: true,
			isSort: true,
			isDuration: true,
			imgs: require('../../../assets/images/ic-btn-one1.png'),
			heads: {
				img1: require('../../../assets/images/flight-prev.png'),
				img2: require('../../../assets/images/ic-loudou.png'),
				fromCity: 'New Delhi',
				toCity: 'Mumbai',
				time: '18Mar-31Mar',
				traveller: '1'
			},
			titleList: [
				"Time",
				"Duration",
				"Price"
			],
			/**
			 @type {OnewayFilter} onewayFilter
			*/
			onewayFilter: null,
			TimeFormatUtil
		}
	},
	methods: {
		showPay(index) {
			var el = this.$refs.payoption[index];
			if (el.style.display == 'block') {
				el.style.display = 'none';
			} else {
				el.style.display = 'block';
			}
		},
		goBack() {
			Indicator.close();
			this.$router.push('/');
		},
		close() {
			Indicator.close();
			this.showPopup2 = false;
		},
		getFlight() {
			return this.$store.getters.selectflightofall;
		},
		skipFilter() {
			this.$router.push('/oneway/filter');
		},
		ico(item) {
			return item.airline.iconPath;
		},
		sort(index) {
			this.sortItem = index;
			var con_img = document.querySelectorAll('.con-title i')[index];
			if (this.isSort) {
				con_img.style.transition = '.3s';
				con_img.style.transform = 'rotateX(0deg)';
				con_img.style.webkitTransform = 'rotateX(0deg)';
			} else {
				con_img.style.transition = '.3s';
				con_img.style.transform = 'rotateX(180deg)';
				con_img.style.webkitTransform = 'rotateX(180deg)';
			}
		},
		onFlightItemClick(index) {
			Indicator.open({
				spinnerType: 'fading-circle'
			});
			let self = this
			this.$store.getters.flightOrder.setDepartFlight(this, this.getFlight()[index])
			this.$store.getters.flightOrder.setAirportFullName(this.getFlight()[index])
			this.$store.getters.flightOrder.checkPrice(this)
				.then(function (res) {
					Indicator.close();
					let order = self.$store.getters.flightOrder;
					let orderJson = order.toJSON()
					let orderStr = JSON.stringify(orderJson)
					sessionStorage.order = orderStr
					self.$router.push('/book')
				}).catch(function (err) {
					Indicator.close();
					self.showPopup2 = true;
					console.log(err)
				})
		},
		sortDate(sortType) {
			switch (sortType) {
				case SORT_BY_TIME:
					this.isTime = !this.isTime;
					this.getFlight().sort((o1, o2) => {
						if (this.isTime) {
							this.isSort = true;
							return o1.departDate.getTime() - o2.departDate.getTime();
						} else {
							this.isSort = false;
							return o2.departDate.getTime() - o1.departDate.getTime();
						}
					});
					break;
				case SORT_BY_DURATION:
					this.isDuration = !this.isDuration;
					this.getFlight().sort((o1, o2) => {
						if (this.isDuration) {
							this.isSort = true;
							return o1.getDurationInMinute() - o2.getDurationInMinute();
						} else {
							this.isSort = false;
							return o2.getDurationInMinute() - o1.getDurationInMinute();
						}
					})

					break;
				case SORT_BY_PRICE:
					this.isPrice = !this.isPrice;
					this.getFlight().sort((o1, o2) => {
						if (this.isPrice) {
							this.isSort = true;
							return o1.getPrice() - o2.getPrice();
						} else {
							this.isSort = false;
							return o2.getPrice() - o1.getPrice();
						}
					})
					break;
			}
		},
		refreshFlightDates(datas) {
			//jie ti yan jia de policys
			let props = datas.x.props;
			let flightDiscountItems = []
			let fac = new FlightFactory(datas.departFlightArray)
			let allFlight = fac.build((flight, discount) => {
				flightDiscountItems.push(new DiscountItem(flight.flightNumber, Number(discount)))
			})

			this.$store.commit(XFlight.getAllFlight, allFlight)
			//GetFlightOrderUtil.setDepartOrReturnFlightIntoSession(allFlight,sessionStorage,"flight")
			sessionStorage.flightType = "one"

			this.$store.commit(XFlight.selsectAllFlight, allFlight)

			//let a =this.getFlight();
			// let policys = [[
			// 	new OnewayLadderDiscountPolicy(props),
			// 	new OnewayCompanyDiscountPolicy(flightDiscountItems)
			// ]]
			// _discountManager = new OnewayDiscountManager(policys)

			// for (let f of this.getFlight()) {
			// 	_discountManager.calculateDiscount(f)
			// }
			this.getFlight().sort((o1, o2) => {
				this.isSort = true;
				return o1.getPrice() - o2.getPrice();
			})
			this.getFlight().forEach((el) => {
				let d = el.departDate;
				let r = el.returnDate;
				el.durationDays = r.getDate() - d.getDate();
			})
		},
		flightDurationDes: (flight) => {
			return this.TimeFormatUtil.getDurationDescription(flight)
		},
		hourAndMinuteDescription: (date) => {
			return this.TimeFormatUtil.getDisplayHourAndMinute(date)
		},
		calculateDiscount(flight) {

		},
		getFlightData(index) {

			this.idx = index;
		},
		filter(filterOptions) {

			this.filterOptions = filterOptions;
		}
	},
	computed: {
		getFlightOrder() {

			return GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
		},
		flightTimeRangeString() {

			if (this.$store.getters.flightOrder != null) {
				let d = this.$store.getters.flightOrder.departDate
				return TimeFormatUtil.getMonthDescription(d.getMonth()) + d.getDate();
			}

		},
		travellerNum() {
			let order = this.$store.getters.flightOrder
			if (order != null) {
				let adultNum = order.adults.length
				let childNum = order.children.length
				let infantsNum = order.infants.length
				return (adultNum + childNum + infantsNum)
			}

		},
		iconPath(item) {

			return item.airline.iconPath;
		},
		sortItem: {
			set: function (index) {

				this.sortType = index;
				this.sortDate(this.sortType);
			},
			get: function () {

				return this.sortType;
			}
		},
		displayedFlights() {
			return this.getFlight()
		}
	},
	mounted() {
		this.$store.commit(XFlight.getAllFlight, null)
		this.$store.commit(XFlight.selsectAllFlight, null)
		let opraOrder = this.getFlightOrder

		this.showLoad = true;
		this.showPopup = false;

		opraOrder.searchSuitableFlights(this).then((jsonObect) => {
			this.showLoad = false;
			Indicator.close();
			this.refreshFlightDates(jsonObect);
			this.$store.state.flightOrder.order.token = jsonObect.token

			this.onewayFilter = new OnewayFilter(this.getFlight())
		}).catch((res) => {
			this.showPopup = true;
			console.log(res);
		})
	}
}


</script>
<style lang='less' scoped>
.prev {
	width: 0.9rem;
}

::-webkit-scrollbar {
	display: none;
}

.header {
	background: #0b9d78;
	i {
		display: block;
		color: #fff;
		font-size: 0.8rem;
	}
	.next {
		display: block;
		img {
			width: 0.8rem;
			padding: 0.64rem;
		}
	}
}

.title {
	line-height: 1.5;
	.title-detail {
		font-size: 0.8rem;
		color: #fff;
	}
	.title-detail-ico {
		width: 0.64rem;
		height: 0.64rem;
		display: inline-block;
		background: url('../../../assets/images/ic-btn-one3.png') center no-repeat;
		background-size: 0.64rem;
	}
	.title-info {
		font-size: 0.56rem;
		color: #fff;
	}
}

.tips {
	display: none;
	text-align: left;
	.tips-list {
		padding: 0.3rem 0.64rem;
		line-height: 1.5;
		li {
			font-size: 0.43rem;
		}
	}
}

.con-title {
	width: 100%;
	margin-top: 2.24rem;
	font-size: 0.64rem;
	color: #c2c2c2;
	.span-wrap {
		padding: 0.1rem 0;
	}
	span {
		box-sizing: border-box;
		display: block;
		width: 33.33%;
		line-height: 1.7rem;
		border-top: 1px solid #d6d6d6;
		border-bottom: 1px solid #d6d6d6;
	}
	.con_img {
		transition: .3s;
		-webkit-transition: .3;
	}
	.img-up {
		transform: 'rotateX(0deg)';
		-webkit-transform: 'rotateX(0deg)';
	}
	.img-down {
		transform: 'rotateX(180deg)';
		-webkit-transform: 'rotateX(180deg)';
	}
	.active {
		color: #ffad3d;
		i {
			color: #ffad3d;
		}
	}
	i {
		margin-left: 6px;
		color: #fff;
		img {
			width: 0.3rem;
		}
	}
}

.container:before {
	display: table;
	content: "";
}

.flight-info {
	padding: 0.3rem 0.64rem;
	position: absolute;
	top: 4.2rem;
	left: 0;
	right: 0;
	bottom: 0;

	ul {
		overflow: auto;
		height: 100%;
		background-color: #fff;
		.flight-content {
			margin: 0;
			padding: 0.3rem 0.6rem;
			border: 1px solid #dddddd;
			margin-top: 0.1rem;
			border-top-left-radius: 0.2rem;
			border-top-right-radius: 0.2rem;
			.flight-time {
				.flight-time-ico {
					img {
						width: 1.536rem;
						display: block;
						margin: 0 auto;
					}
					span {
						font-size: 0.43rem;
						display: block;
						margin-top: 0.2rem;
						color: #adadad;
					}
				}
			}
			.flight-time-info {
				.schedule,
				.time-cost,
				.city-name {
					padding: 0.1rem 0;
				}
				.schedule {
					span {
						font-size: 0.768rem;
					}
				}
				.time-cost {
					margin-left: 0.05rem;
					span {
						font-size: 0.47rem;
					}
				}
				.city-name {
					.depart,
					.arrive {
						font-size: 0.47rem;
					}
				}
				h2 {
					width: 5.8rem;
					font-size: 0.56rem;
					font-weight: bold;
					line-height: 1rem;
					text-align: center;
					i {
						font-size: 0.52rem;
					}
				}
				p {
					width: 5.8rem;
					font-size: 0.4rem;
					line-height: 0.8rem;
					text-align: justify;
				}
			}
			.flight-price {
				.flight-price-detail {
					.present-price {
						width: 3rem;
						font-size: 0.6rem;
						text-align: left;
						color: #ffad3d;
						line-height: 0.8rem;
						font-weight: bold;
					}
					.past-price {
						width: 3rem;
						font-size: 0.5rem;
						color: #ccc;
						text-align: left;
						line-height: 0.8rem;
						span {
							text-decoration: line-through;
						}
					}
					.set-icon {
						color: #ccc;
					}
				}
				.flight-next {
					width: 0.6rem;
					background: url('../../../assets/images/ic-btn-one.png') center no-repeat;
					background-size: 0.5rem;
				}
			}
		}
		.select-pay {
			display: none;
			border: 1px solid #dddddd;
			border-top: none;
			background: #f5f5f5;
			.lower-price,
			.cashback {
				text-align: left;
				padding: 0 0.64rem;
				.title,
				.price,
				.back-price {
					height: 1.664rem;
					line-height: 1.664rem;
					font-size: 0.469rem;
				}
				.title {
					width: 30%;
				}
				.price {
					color: #f65858;
				}
				.price-color {
					color: #fdbb62;
				}
				.sp {
					opacity: 0;
				}
			}
			.lower-price {
				border-bottom: 1px solid #dddddd;
			}
		}
	}
}
</style>
