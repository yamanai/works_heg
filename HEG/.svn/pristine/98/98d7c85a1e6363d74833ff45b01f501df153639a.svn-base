<template>
    <div class="wrapper">
        <head-top class="header">
            <i slot="left" class="iconfont icon-back" @click="goBack"></i>
            <span slot="title">{{heads.title}}</span>
            <img class="placeholder" slot="right" :src="heads.img" alt="">
        </head-top>
        <transition enter-active-class="slideInRight" leave-active-class="slideOutRight">
            <router-view class="animated"></router-view>
        </transition>
        <div class="container">
            <div class="page-1">
                <div v-for="(info, index) in flightInfos" :key="info.id" :class="tripClass(index)">
                    <div class="title">
                        <span>Review your booking</span>
                    </div>
                    <div class="trip-wrapper">
                        <div class="trip-cont">
                            <div v-for="(item,i) in info.flight.stops" :key="item.id">
                                <div class="trip-num">
                                    <span class="title-img">
                                        <img :src="item.airline.iconPath" />
                                    </span>
                                    <span>{{item.airline.name}}&nbsp;&nbsp;&nbsp;{{item.flightNumber}}</span>
                                </div>
                                <div class="time-info flex space-between">
                                    <div class="from-time">
                                        <h2>
                                            <span>{{item.departAirportName}}</span>
                                            <span>{{TimeFormatUtil.getDisplayHourAndMinute(new Date(item.departDate))}}</span>
                                        </h2>
                                        <div>
                                            <span>{{TimeFormatUtil.getBookDetailDate(new Date(item.departDate))}}</span>
                                        </div>
                                        <div>
                                            <span>{{item.departAirport}}</span>
                                        </div>
                                    </div>
                                    <div class="distance">
                                        <span>{{item.waitTime}}</span>
                                    </div>
                                    <div class="to-time from-time">
                                        <h2>
                                            <span>{{item.arrivalAirportName}}</span>
                                            <span>{{TimeFormatUtil.getDisplayHourAndMinute(new Date(item.returnDate))}}
                                                <i v-show="info.flight.durationDays!=0">&nbsp;+{{info.flight.durationDays}}</i>
                                            </span>
                                        </h2>
                                        <div>
                                            <span>{{TimeFormatUtil.getBookDetailDate(new Date(item.returnDate))}}</span>
                                        </div>
                                        <div>
                                            <span>{{item.arrivalAirport}}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="trip-attach">
                                <div class="rules flex space-between">
                                    <span>{{flightOrder.departFlight.refundable? 'Refundable' : 'No-Refoundable'}}</span>
                                    <a @click='fareRule(index)' v-show='info.flight.refundable'>Fare Rules</a>
                                </div>
                            </div>
                        </div>
                        <div class="trip-attach" v-if="flightOrder!=null">
                            <div class="baggage-tit">
                                <span>Baggage info</span>
                            </div>
                            <div class="baggage-info" v-for="info in flightOrder.baggageinfo" :key="info.id">
                                <h2>{{info.flightNumber}}</h2>
                                <div class="flex space-between">
                                    <span>Check in</span>
                                    <span>{{info.ch}} kg</span>
                                </div>
                                <div class="flex space-between">
                                    <span>Cabin</span>
                                    <span>{{info.ca}} kg</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
    
                <!--占位 offers  -->
                <!--占位 offers  -->
                <!--占位 offers  -->
            </div>
            <div class="page-2">
                <h2>Traveller Information</h2>
                <div class="traveller-info" v-if="flightOrder!=null">
                    <div class="traveller-form" ref="adults" v-for="(item,index) in flightOrder.adults" :key="item.id">
                        <div class="passenger-from flex space-between align-items-center">
                            <div class="form-group">
                                <span>adults</span>
                            </div>
                            <div class="form-group">
                                <input class="sp" type="text" v-model="adultsFormDetail[index].firstname" placeholder="First name">
                            </div>
                            <div class="form-group">
                                <input type="text" v-model="adultsFormDetail[index].lastname" placeholder="Last name">
                            </div>
                            <div class="form-group tar">
                                <select name="sex" v-model="adultsFormDetail[index].title" id="passager-detail-sex">
                                    <option v-for="item in passengerSex" :key='item.id' :value="item">
                                        {{item}}
                                    </option>
                                </select>
                            </div>
                        </div>
                        <div class="date-form">
                            <div class="form-group flex space-between align-items-center">
                                <label for="date-pick">Birthday
                                </label>
                                <input v-model="adultsFormDetail[index].birthday" id="date-pick" type="date">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="traveller-info" v-if="flightOrder!=null">
                    <div class="traveller-form" ref="children" v-for="(item,index) in flightOrder.children" :key="item.id">
                        <div class="passenger-from flex space-between align-items-center">
                            <div class="form-group">
                                <span>children</span>
                            </div>
                            <div class="form-group">
                                <input type="text" v-model="childrenFormDetail[index].firstname" placeholder="First name">
                            </div>
                            <div class="form-group">
                                <input type="text" v-model="childrenFormDetail[index].lastname" placeholder="Last name">
                            </div>
                            <div class="form-group tar">
                                <select name="sex" v-model="childrenFormDetail[index].title" id="passager-detail-sex">
                                    <option v-for="item in passengerSex" :key='item.id' :value="item">
                                        {{item}}
                                    </option>
                                </select>
                            </div>
                        </div>
                        <div class="date-form">
                            <div class="form-group flex space-between align-items-center">
                                <label for="date-pick">Birthday
                                </label>
                                <input id="date-pick" type="date" v-model="childrenFormDetail[index].birthday">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="traveller-info" v-if="flightOrder!=null">
                    <div class="traveller-form" ref="infants" v-for="(item,index) in flightOrder.infants" :key="item.id">
                        <div class="passenger-from flex space-between align-items-center">
                            <div class="form-group">
                                <span>infants</span>
                            </div>
                            <div class="form-group">
                                <input type="text" v-model="infantsFormDetail[index].firstname" placeholder="First name">
                            </div>
                            <div class="form-group">
                                <input type="text" v-model="infantsFormDetail[index].lastname" placeholder="Last name">
                            </div>
                            <div class="form-group tar">
                                <select name="sex" v-model="infantsFormDetail[index].title" id="passager-detail-sex">
                                    <option v-for="item in passengerSex" :key='item.id' :value="item">
                                        {{item}}
                                    </option>
                                </select>
                            </div>
                        </div>
                        <div class="date-form">
                            <div class="form-group flex space-between align-items-center">
                                <label for="date-pick">Birthday
                                </label>
                                <input id="date-pick" type="date" v-model="infantsFormDetail[index].birthday">
                            </div>
                        </div>
                    </div>
                </div>
                <h2>Contact Information</h2>
                <div class="contact-info">
                    <ul>
                        <li class="flex content-start align-items-center">
                            <select name="" id="">
                                <option value="">Title</option>
                            </select>
                            <input type="text" placeholder="First Name/Last Name" v-model="contactName" name="contactName" id="contactName">
                        </li>
                        <li class="flex content-start align-items-center">
                            <input type="text" placeholder="Email Address" v-model="email" name="email" id="email">
                        </li>
                        <li class="flex content-start align-items-center">
                            <input type="text" placeholder='Mobile Number' v-model="mobile" name="mobile" id="mobile">
                        </li>
                    </ul>
                </div>
                <p class="tips">Your ticket &amp; PNR info will be sent here</p>
            </div>
            <div class="page-3">
                <div class="title">
                    <span>GST Information</span>
                </div>
                <div class="form-group sp">
                    <input @click="gstOpen" type="checkbox" id="check">
                    <label :class="{changeC:isGST}" class="checkinfo" for="check">I have a GST number(optional)</label>
                </div>
                <div class="container" v-show="isGST">
                    <form action="">
                        <div class="form-group">
                            <input type="text" placeholder="GST Number" v-model="ordersGSTInfo.registrationNumber">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="Company Name" v-model="ordersGSTInfo.registeredCompanyName">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="Bussiness Email ID" v-model="ordersGSTInfo.email">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="Company Address" v-model="ordersGSTInfo.registeredCompanyAddress">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="Phone Number" v-model="ordersGSTInfo.phone">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="India" v-model="ordersGSTInfo.country">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="Haryana" v-model="ordersGSTInfo.state">
                        </div>
                    </form>
                </div>
            </div>
            <div class="page-4">
                <div class="offers">
                    <h2>Happy Easy Go Offers</h2>
                    <div class="offers-wrapper">
                        <div class="offers-group">
                            <div class="radio-group flex content-start align-items-center" @click="radio1">
                                <div class="round1">
                                    <div :class="{round2:isSelecA}"></div>
                                </div>
                                <p :class="{yellow:isSelecA}">Get Instant Discount with Coupon</p>
                            </div>
                            <div class="input-group flex content-start">
                                <input type="text" ref="coupon" v-model="couponCode" :class="{yellowborder:isSelecA}">
                                <a :class="{cheked:isSelecA,disabel:!isSelecA}" href="javascript:" @click="applyCode">Apply code</a>
                            </div>
                        </div>
                        <div class="offers-group" v-show="isLogin">
                            <div class="radio-group flex content-start align-items-center" @click="radio2">
                                <div class="round1">
                                    <div :class="{round2:isSelecB}"></div>
                                </div>
                                <p :class="{yellow:isSelecB}">Get Instant Discount with Happy Silver Rs. 0</p>
                            </div>
                        </div>
                        <div class="offers-group" v-show="isLogin">
                            <div class="radio-group flex content-start align-items-center" @click="radio3">
                                <div class="round1">
                                    <div :class="{round2:isSelecC}"></div>
                                </div>
                                <p :class="{yellow:isSelecC}">Use my Happy Gold
                                    <span>Rs.</span>
                                </p>
                            </div>
                            <div class="input-group flex content-start align-items-center">
                                <input type="text" ref="gold" v-model="useGold" disabled="true" :class="{yellowborder:isSelecC}">
                                <a :class="{cheked:isSelecC,disabel:!isSelecC}" href="javascript:">Submit</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="page-5">
                <h2>Grand Total</h2>
                <div class="price-info">
                    <div class="total-price">
                        <span class="price">
                            <span class="rs">RS.</span>{{flightOrder.departFlight.realPrice}}
                        </span>
                        <span class="old-price">
                            <del>
                                <span class="rs">RS.</span>{{flightOrder.departFlight.price}}
                            </del>
                        </span>
                    </div>
                    <div class="agreement flex content-start align-items-center">
                        <input type="checkbox" checked="checked">
                        <span> I agree with the
                            <span class="link">Terms& Conditions</span>of Happy Easy Go</span>
                    </div>
                    <a class="confirm" @click="confirmBook" href="javascript:">confirm</a>
                </div>
            </div>
        </div>
    </div>
</template>
<script>
import headTop from '../../components/head/head.vue'
import { TimeFormatUtil, GetFlightOrderUtil } from '../../models/utils'
import Toast from 'mint-ui/lib/toast';
import { mapMutations } from 'vuex'
import { mutaionNames } from '../../vuex'
import { FlightOrder, OnewayOrder, RoundTripOrder } from '../../models/flightorder'
import { Coupon } from '../../models/discount'
import * as mutationNames from '../../vuex/models/flightorder/MutationName.js'
import { DomainManager } from '../../config/DomainManager.js'
import { CookieUtil } from '../../models/utils'

export default {
    components: {
        headTop
    },
    data() {
        return {
            //page1
            showFare: false,
            isSelecA: false,
            isSelecB: false,
            isSelecC: false,
            heads: {
                img: require('../../assets/images/flight-prev.png'),
                title: 'Book',
                img2: require('../../assets/images/book/p.png')
            },
            forms: [
                {
                    title: 'Name',
                    placeholder: 'Enter your name',
                    type: 'text'
                },
                {
                    title: 'Mobile',
                    placeholder: 'Enter your Mobile',
                    type: 'text'
                },
                {
                    title: 'Email',
                    placeholder: 'Enter your emails',
                    type: 'text'
                }
            ],
            durationDays: 0,
            couponCode: '',
            isChange: false,
            TimeFormatUtil,
            //page2
            mobile: "",
            email: "",
            contactName: "",
            showPopup: false,
            errorMassages: "",
            passengerType: {
                adults: 'adults',
                children: 'children',
                infants: 'infants'
            },
            passengerSex: ['Gender', 'Male', 'Female'],
            datePick: {
                year: new Date().getFullYear(),
                month: new Date().getMonth() + 1,
                day: new Date().getDate()
            },
            adultsFormDetail: [],
            childrenFormDetail: [],
            infantsFormDetail: [],
            //page3
            isGST: false,
            ordersGSTInfo: {
                country: "India",
                email: '',
                phone: '',
                registeredCompanyAddress: '',
                registeredCompanyName: '',
                registrationNumber: '',
                state: "Haryana"
            },
            useGold: ''
        }
    },
    created: function () {
        let order = this.flightOrder;
        for (let i = 0; i < order.adults.length; i++) {
            let item = { firstname: '', lastname: '', title: 'Gender', birthday: '' };
            this.adultsFormDetail.push(item);
        }

        for (let i = 0; i < order.children.length; i++) {
            let item = { firstname: '', lastname: '', title: 'Gender', birthday: '' };
            this.childrenFormDetail.push(item);
        }

        for (let i = 0; i < order.infants.length; i++) {
            let item = { firstname: '', lastname: '', title: 'Gender', birthday: '' };
            this.infantsFormDetail.push(item);
        }
    },
    computed: {
        //page1
        isLogin() {
            let cu = new CookieUtil();
            if (cu.hasItem('uuid')) {
                return true;
            } else {
                return false;
            }
        },
        flightOrder() {
            let order = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
            return order
        },
        travellerNum() {
            let order = this.flightOrder
            if (order != null) {
                let adultNum = this.flightOrder.adults.length
                let childNum = this.flightOrder.children.length
                let infantsNum = this.flightOrder.infants.length
                return (adultNum + childNum + infantsNum)
            } else {
                return 0
            }
        },
        flightInfos() {
            let res = []
            let order = this.flightOrder
            if (order != null) {
                res.push({
                    flight: order.departFlight,
                    departAirport: order.departAirport,
                    destinationAirport: order.destinationAirport
                })
                if (this.flightOrder instanceof RoundTripOrder) {
                    res.push({
                        flight: order.returnFlight,
                        departAirport: order.destinationAirport,
                        destinationAirport: order.departAirport
                    })
                }
            }
            return res
        },
        travellersDescriptionStr() {
            let adultsNum = this.flightOrder.adults.length
            let childrenNum = this.flightOrder.children.length
            let infantsNum = this.flightOrder.infants.length

            let adultsDes = adultsNum == 0 ? '' : adultsNum + ' adult(s) '
            let childrenDes = ''
            if (childrenNum != 0) {
                if (childrenNum == 1) {
                    childrenDes = 1 + ' child '
                } else {
                    childrenDes = childrenNum + ' children '
                }
            }
            let infantsDes = infantsNum == 0 ? '' : infantsNum + 'infant(s)'

            return adultsDes + childrenDes + infantsDes
        }
    },
    methods: {
        confirmBook() {
            let order = this.flightOrder;
            let adults = order.adults;
            let children = order.children;
            let infants = order.infants;

            console.log(this.ordersGSTInfo);
            if (this.isGST) {
                order.ordersGSTInfo = this.ordersGSTInfo;
            }

            for (let v in adults) {
                adults[v] = this.adultsFormDetail[v];
            }

            for (let v in children) {
                children[v] = this.childrenFormDetail[v];
            }

            for (let v in infants) {
                infants[v] = this.infantsFormDetail[v];
            }

            for (let i = 0; i < adults.length; i++) {
                if (typeof (adults[i].firstname) == "undefined" || typeof (adults[i].lastname) == "undefined" || adults[i].firstname.trim() == "" || adults[i].lastname.trim() == "") {
                    Toast('Please complete the passenger information');
                    return;
                }
            }

            for (let i = 0; i < children.length; i++) {
                if (typeof (children[i].firstname) == "undefined" || typeof (children[i].lastname) == "undefined" || children[i].firstname.trim() == "" || children[i].lastname.trim() == "") {
                    Toast('Please complete the passenger information');
                    return;
                }
            }

            for (let i = 0; i < infants.length; i++) {
                if (typeof (infants[i].firstname) == "undefined" || typeof (infants[i].lastname) == "undefined" || infants[i].firstname.trim() == "" || infants[i].lastname.trim() == "") {
                    Toast({
                        message: 'Please complete the passenger information',
                        duration: 1000
                    });
                    return;
                }
            }

            let $mval = this.mobile;
            let $eval = this.email;
            let mreg = /^\d+$/g;
            let ereg = /@/g;
            if (this.contactName.trim() == '') {
                Toast({
                    message: 'Please enter correct Contact Name',
                    duration: 1000
                });
            } else if (this.mobile.length > 20) {
                Toast({
                    message: 'Mobile number length is too long',
                    duration: 1000
                });
            } else if (!mreg.test($mval)) {
                Toast({
                    message: 'Mobile number is invalld',
                    duration: 1000
                });
            } else if (!ereg.test($eval)) {
                Toast({
                    message: 'Please enter correct Email Adress',
                    duration: 1000
                });
            } else {
                let flightOrderContact = this.$store.getters.flightOrder;
                let contactInfo = flightOrderContact.contactInfo;
                contactInfo.cellphone = this.mobile;
                contactInfo.email = this.email;
                contactInfo.name = this.contactName;
                GetFlightOrderUtil.setOrderIntoSession(flightOrderContact, sessionStorage)

                if (flightOrderContact.children.length != 0 || flightOrderContact.infants.length != 0) {
                    flightOrderContact.checkPassengerAge(this).then(res => {

                        if (!res.success) {

                            this.showPopup = true
                            let failInfo = res.flightPsrs

                            this.errorMassages = flightOrderContact.getDateErrorMsgArr(failInfo)

                            this.showPopup = true
                        } else {
                            this.$router.push("/payment")
                        }


                    })
                } else {
                    this.$router.push("/payment")
                }

            }

            GetFlightOrderUtil.setOrderIntoSession(order, sessionStorage);
            this.$router.push('/payment');
        },
        //page1
        ...mapMutations([
            mutaionNames.setBaggageInfo
        ]),
        goBack() {
            let trip = sessionStorage.flightType;
            switch (trip) {
                case 'one':
                    this.$router.push('/oneway');
                    break;
                case 'two':
                    this.$router.push('/roundtrip');
                    break;
            }
        },
        tripClass(index) {
            return "trip-info"
        },
        fareRule(index) {
            let arr = this.flightInfos[index].flight;
            let traverllNum = this.travellerNum;
            let averagePrice = Math.round(arr.realPrice / traverllNum);
            this.$router.push({ path: '/book/fare', query: { flightNo: arr.flightNumber, departTimeStamp: arr.departTimeStamp, averagePrice: averagePrice } });

        },
        submitBook() {
            this.$router.push("/traveller")
        },
        radio1() {
            this.isSelecA = !this.isSelecA;
            if (this.isSelecA && this.isSelecB) {
                this.isSelecB = false;
            }
            if (!this.isSelecA) {
                this.$refs.coupon.disabled = true;
            } else {
                this.$refs.coupon.disabled = false;
            }
        },
        radio2() {
            this.isSelecB = !this.isSelecB;
            if (this.isSelecA && this.isSelecB) {
                this.isSelecA = false;
                this.$refs.coupon.disabled = true;
            }
            if (this.isSelecC && this.isSelecB) {
                this.isSelecC = false;
                this.$refs.gold.disabled = true;
            }
        },
        radio3() {
            this.isSelecC = !this.isSelecC;
            if (this.isSelecC && this.isSelecB) {
                this.isSelecB = false;
            }
            if (!this.isSelecC) {
                this.$refs.gold.disabled = true;
            } else {
                this.$refs.gold.disabled = false;
            }
        },
        getFlightNumber(key) {
            return this.$store.getters.flightOrder[key].flightNumber.split('/')
        },
        getCoupon(flight) {
            let self = this;
            let arr = [];
            if (this.isSelecA && this.couponCode != '') {
                Coupon.getCoupon(self, self.couponCode)
                    .then(res => {
                        self.coupon = Coupon.buildCoupon(res);
                        if (!self.isChange) {
                            self.coupon.getDiscountPrice(self, flight)
                            self.coupon.buildDiscount(self);
                            Toast({
                                message: 'Price has changed',
                                duration: 1000
                            });
                            self.isChange = true;
                            sessionStorage.setItem("couponCode", self.couponCode);
                        }
                    }).catch(err => {
                        Toast({
                            message: 'Sorry,coupon not found',
                            duration: 1000
                        });
                        console.log(err);
                    })
            }
        },
        useGold() {
            if (this.isSelecC && this.useGold != '') {
                let trueGold = this.useGold;
                let goldCost = {
                    4: {
                        trade_type: 4,
                        trade_amount: trueGold
                    }
                };
            }
        },
        useSilver() {

        },
        applyCode() {
            if (this.isSelecA && this.couponCode != '') {
                //选中可输入coupon
                let coupon = this.$store.getters.coupon;
                let oldCouponCode = '';
                if (coupon) {
                    // 判断vuex是否有coupon （原来输入过 但是没有confirm）
                    for (let i in coupon) {
                        oldCouponCode = coupon[i].config.k1
                        // 变量old被老coupon赋值 
                    }
                } else {
                    //无coupon 变量old为空
                    oldCouponCode = '';
                }
                let reg = new RegExp('^' + oldCouponCode + '&', 'ig')
                //如果重新输入的coupon和 old变量相同 存于vuex的order 准备save传值后台减免
                if (this.couponCode == oldCouponCode) {
                    Toast({
                        message: 'Price has changed',
                        duration: 1000
                    });
                } else {
                    //如果不同 取当前session 里的flighttype 赋值arr 执行getCoupon
                    let flightType = sessionStorage.flightType;
                    let flightArr = null;
                    switch (flightType) {
                        case "one":
                            flightArr = this.$store.getters.flightofall;
                            break;
                        case "two":
                            flightArr = this.$store.getters.returnflightofall;
                            break;
                    }
                    this.getCoupon(flightArr);
                }
            }
        },
        //page2
        getTraveller(index, humanType) {
            this.$router.push({ path: '/detail', query: { index: index, humanType: humanType } });
        },
        //page3
        gstOpen() {
            this.isGST = !this.isGST;
        }
    },
    mounted() {
        //page1
        let self = this;
        let orderInfo = this.flightOrder
        let orderToken = orderInfo.token;

        let dNumber = this.getFlightNumber('departFlight');
        let rNumber = [];
        if (!orderToken) {
            this.isShow = !this.isShow;
            Toast({
                message: 'error',
                duration: 2000
            })
            setTimeout(function () {
                self.$router.push('/home')
            }, 2000)
        }
        let queryString = "token=" + orderToken;
        let url = DomainManager.getFlights(queryString);
        this.$http.get(url).then(function (res) {
            let json = JSON.parse(res.bodyText).flights;
            let baginfo = this.$store.getters.flightOrder.baggageinfo;
            baginfo.length = 0;
            json.departFlight.stopByFlightArray.forEach((el) => {
                baginfo.push(el.baggageInfo);
            })
            if (json.returnFlight) {
                rNumber = this.getFlightNumber('returnFlight');
                json.returnFlight.stopByFlightArray.forEach((el) => {
                    baginfo.push(el.baggageInfo);
                })
            }
            let fNumber = dNumber.concat(rNumber);

            if (json.returnFlight) {
                orderInfo.serviceFee = json.departFlight.fee.cf + json.returnFlight.fee.cf;
            } else {
                orderInfo.serviceFee = json.departFlight.fee.cf;
            }
            for (var i = 0; i < baginfo.length; i++) {
                baginfo[i].flightNumber = fNumber[i]
            }
        })

        this.flightInfos.forEach((el) => {
            let d = el.flight.departDate;
            let r = el.flight.returnDate;
            el.durationDays = r.getDate() - d.getDate();
        })
        GetFlightOrderUtil.setOrderIntoSession(orderInfo, sessionStorage)
        let coupon = this.$store.getters.coupon;
        if (coupon) {
            for (let i in coupon) {
                this.couponCode = coupon[i].config.k1;
            }
        } else {
            this.couponCode = '';
        }
        //page2
        let order = this.flightOrder;
        if (order.contactInfo != null) {
            let contactInfo = order.contactInfo;
            if (typeof (contactInfo.cellphone) != "undefined") this.mobile = contactInfo.cellphone;
            if (typeof (contactInfo.email) != "undefined") this.email = contactInfo.email;
            if (typeof (contactInfo.name) != "undefined") this.contactName = contactInfo.name;
        }
    }

}
</script>
<style lang="less" scoped>
.selected {
    border-color: #ffad3d!important;
    background: #ffad3d url('../../assets/images/sure.png') center no-repeat;
    background-size: contain;
}

::-webkit-scrollbar {
    display: none;
}

::-webkit-input-placeholder {
    color: #adadad;
}

::-moz-placeholder {
    color: #adadad;
}

:-moz-placeholder {
    color: #adadad;
}

.header {
    background: #0b9d78;
    box-sizing: border-box;
    .head-ico {
        padding: 0 0.64rem;
    }
    span {
        color: #fff;
        font-size: 0.768rem;
    }
    .placeholder {
        opacity: 0;
    }
}

.container {
    overflow: scroll;
    background: #ebebeb;
    .page-1 {
        padding-top: 2.04rem;
        background: #fff;
        margin-bottom: 0.21rem;
        .trip-wrapper {
            padding: 0 0.64rem;
        }
        .trip-info {
            .title {
                text-align: left;
                font-size: 0.682rem;
                padding: 0.55rem 0.64rem;
                border-bottom: 1px solid #d6d6d6;
            }
            .trip-cont {
                background-color: #fff;
                border-radius: 0.4rem;
                padding: 0.4rem;
                .trip-num {
                    height: 2.14rem;
                    line-height: 2.14rem;
                    text-align: left;
                    span {
                        font-size: 0.68rem;
                        color: #666;
                    }
                    .title-img {
                        width: 0.68rem;
                        height: 2.14rem;
                        img {
                            width: 0.68rem;
                        }
                        margin-right:0.5rem;
                    }
                }
                .time-info {
                    padding-bottom: 0.4rem;
                    span {
                        display: block;
                    }
                    h2 {
                        font-size: 0.768rem;
                        line-height: 1.2rem;
                        color: #333;
                    }
                    div {
                        color: #ccc;
                        font-size: 0.56rem;
                        line-height: 0.68rem;
                    }
                }
                .from-time {
                    width: 5rem;
                    span {
                        display: block;
                    }
                    h2 {
                        text-align: right;
                    }
                    div {
                        text-align: right;
                    }
                }
                .to-time {
                    width: 5rem;
                    h2 {
                        text-align: left;
                        i {
                            font-size: 0.52rem;
                        }
                    }
                    div {
                        text-align: left;
                    }
                }
                .distance {
                    span {
                        font-size: 0.5rem;
                        color: #666;
                        width: 3rem;
                        height: 1.1rem;
                        line-height: 1.1rem;
                        text-align: center;
                        background: url('../../assets/images/book/icon-.png') center bottom no-repeat;
                        background-size: 2rem;
                    }
                }
            }
        }

        .trip-attach {
            background-color: #fff;
            border-radius: 0.4rem;
            padding: 0.4rem;
            margin-top: 0.4rem;
            .rules {
                height: 1.8rem;
                line-height: 1.8rem;
                border-bottom: 1px solid #eee;
                border-top: 1px solid #eee;
                span,
                a {
                    font-size: 0.56rem;
                    color: #666;
                }
                a {
                    display: block;
                    color: #0b9d78;
                }
            }
            .baggage-tit {
                font-size: 0.6rem;
                color: #333;
                text-align: center;
                padding: 0.2rem 0;
            }
            .baggage-info {
                h2 {
                    font-size: 0.68rem;
                    color: #666;
                    height: 1.9rem;
                    line-height: 1.9rem;
                    text-align: left;
                }
                div {
                    span {
                        display: block;
                        font-size: 0.6rem;
                        color: #ccc;
                        line-height: 1.45rem;
                    }
                }
            }
        }
        .contact-info {
            h2 {
                font-size: 0.68rem;
                color: #333;
                text-align: left;
                line-height: 1.45rem;
                padding-left: 0.4rem;
            }
            .contact-cont {
                padding: 0 0.4rem;
                background-color: #fff;
                padding-bottom: 0.6rem;
                border-radius: 0.4rem;
                .forms {
                    text-align: left;
                    span {
                        font-size: 0.68rem;
                        color: #666;
                        width: 2.05rem;
                        mrgin-right: 0.2rem;
                        line-height: 1.45rem;
                    }
                    input {
                        font-size: 0.5rem;
                        padding-left: 0.2rem;
                        color: #666;
                        border-bottom: 1px solid #ccc;
                        line-height: 1rem;
                        text-indent: 0;
                        border-radius: 0;
                    }
                }
                p {
                    font-size: 0.6rem;
                    color: #ccc;
                    padding-left: 2.4rem;
                    line-height: 0.768rem;
                }
            }
        }

        .fare {
            h2 {
                font-size: 0.68rem;
                color: #333;
                text-align: left;
                line-height: 1.45rem;
                padding-left: 0.4rem;
            }
        }

        .term {
            margin-top: 1rem;
        }

        p {
            font-size: 0.5rem;
            color: #ccc;
            text-align: left;
            padding-left: 0.6rem;
            line-height: 0.768rem;
            .round {
                width: 0.5rem;
                height: 0.5rem;
                border-radius: 50%;
                border: 1px solid #ccc;
                margin-top: 0.4rem;
                margin-right: 0.2rem;
                display: inline-block;
            }
        }

        p::before {
            display: table;
            content: "";
        }

        .payment {
            width: 100%;
            padding: 0.4rem 0 1rem;
            .submitBook {
                width: 100%;
                font-size: 0.768rem;
                color: #fff;
                height: 2rem;
                background-color: #ffad3d;
                border-radius: 0.3rem;
                cursor: pointer;
            }
        }
    }
    .page-2 {
        background: #fff;
        padding: 0 0.64rem;
        margin-bottom: 0.21rem;
        .tips {
            padding: 0.768rem 0.64rem;
        }
        h2 {
            width: 100%;
            font-size: 0.68rem;
            color: #666;
            font-weight: normal;
            text-align: left;
            line-height: 1.6rem;
            border-bottom: 1px solid #dddddd;
        }

        .traveller-info,
        .contact-info {
            background-color: #fff;
            border-radius: 0.4rem;
            li {
                box-sizing: border-box;
                font-size: 0.68rem;
                color: #999;
                width: 100%;
                border-bottom: 1px solid #eee;
                padding: 0.4rem 0.68rem;
                cursor: pointer;
                span:nth-of-type(2) {
                    font-size: 0.52rem;
                }
                span {
                    display: block;
                }
                .sel {
                    width: 0.7rem;
                    display: inline-block; // background: url('../../../assets/images/book/detail_next.png') center no-repeat;
                    background-size: 0.6rem;
                    transform: rotateZ(-90deg);
                    -webkit-transform: rotateZ(-90deg);
                }
                label {
                    padding-right: 0.2rem;
                }
            }
        }
        .traveller-info {
            .traveller-form {
                padding: 0.3rem 0.68rem;
                border-bottom: 1px solid #dddddd;
                .passenger-from {
                    .form-group {
                        text-align: left;
                        width: 25%;
                        select,
                        input {
                            font-size: 0.68rem;
                        }
                        input {
                            width: 100%;
                        }
                        span {
                            font-size: 0.68rem;
                        }
                        .sp {
                            margin-left: -0.5rem;
                        }
                    }
                }
            }
            .date-form {
                padding: 0.3rem 0;
                .form-group {
                    font-size: 0.68rem;
                    label {
                        width: 25%;
                        margin-top: 0.15rem;
                        text-align: left;
                    }
                    input {
                        width: 75%;
                        font-size: 0.68rem;
                        box-sizing: border-box;
                    }
                }
            }
        }

        .contact-info {
            li {
                text-align: left;
                label {
                    width: 20%;
                    text-align: left;
                    font-size: 0.68rem;
                }
                input {
                    padding: 0.2rem;
                    text-indent: 0;
                    width: 100%;
                    font-size: 0.68rem;
                    box-sizing: border-box;
                }
            }
        }

        p {
            font-size: 0.52rem;
            color: #666;
            text-align: left;
            padding: 0.2rem 0.68rem;
        }

        .done {
            .btn {
                width: 100%;
                font-size: 0.768rem;
                color: #fff;
                height: 1.87rem;
                margin-top: 2rem;
                border-radius: 6px;
                background-color: #ffad3d;
                display: inline-block;
                cursor: pointer;
            }
        }
    }
    .page-3 {
        background: #fff;
        margin-bottom: 0.21rem;
        .title {
            font-size: 0.68rem;
            text-align: left;
            padding: 0.55rem 0.64rem;
            border-bottom: 1px solid #d6d6d6;
        }
        .form-group {
            margin-top: 0.23rem;
            #check {
                margin-bottom: 0.2rem;
            }
            .changeC {
                color: #ffad3d;
            }
            input {
                width: 100%;
                text-indent: 0;
                box-sizing: border-box;
                padding: 0.2rem 0.3rem;
                border: 1px solid #ccc;
            }
            input:focus {
                border: 1px solid #ffad3d;
            }
            input:checked {
                color: #ffad3d;
                background: #ffad3d;
            }
            #check {
                display: table-cell;
                vertical-align: middle;
                width: 0.8rem;
                height: 0.8rem;
            }
            .checkinfo {
                display: table-cell;
                vertical-align: middle;
                font-size: 0.74rem;
            }
        }
        .sp {
            display: table;
            vertical-align: middle;
            padding: 0.64rem;
            width: 100%;
            text-align: left;
        }
        .container {
            background: #fff;
            padding: 0 0.64rem 0.64rem 0.64rem;
            .form-group {
                margin-top: 0.23rem;
                input {
                    width: 100%;
                    text-indent: 0;
                    box-sizing: border-box;
                    padding: 0.2rem 0.3rem;
                    border: 1px solid #ccc;
                }
                input:focus {
                    border: 1px solid #ffad3d;
                }
                input:checked {
                    color: #ffad3d;
                    background: #ffad3d;
                }
                #check {
                    display: table-cell;
                    vertical-align: middle;
                    width: 0.8rem;
                    height: 0.8rem;
                }
                .checkinfo {
                    display: table-cell;
                    vertical-align: middle;
                    font-size: 0.74rem;
                }
            }
            .sp {
                display: table;
                vertical-align: middle;
            }
        }
    }
    .page-4 {
        margin-bottom: 0.21rem;
        .offers {
            background-color: #fff;
            padding-bottom: 1.1rem;
            h2 {
                font-size: 0.68rem;
                color: #333;
                text-align: left;
                line-height: 1.9rem;
                border-bottom: 1px solid #eee;
                padding-left: 0.64rem;
            }
            .offers-wrapper {
                padding: 0 0.64rem;
                .offers-group {
                    font-size: 0.6rem;
                    color: #ccc;
                    text-align: left;
                    background-color: #fff;
                    border-radius: 0.2rem;
                    .radio-group {
                        padding: 0.426rem 0;
                        .round1 {
                            width: 0.6rem;
                            height: 0.6rem;
                            border-radius: 50%;
                            border: 1px solid #ccc;
                            position: relative;
                            margin-right: 0.3rem;
                            .round2 {
                                width: 0.3rem;
                                height: 0.3rem;
                                border-radius: 50%;
                                background-color: #ffa033;
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                transform: translateY(-50%) translateX(-50%);
                                -webkit-transform: translateY(-50%) translateX(-50%);
                            }
                        }
                    }
                    .input-group {
                        input {
                            box-sizing: border-box;
                            height: 1.75rem;
                            width: 100%;
                            font-size: 0.68rem;
                            padding: 0.3rem 0.3rem;
                            border: 1px solid #ccc;
                            border-right: 0;
                            border-radius: 0;
                            text-indent: 0;
                        }
                        .yellowborder {
                            border: 1px solid #ffa033;
                        }
                        a {
                            box-sizing: border-box;
                            height: 1.75rem;
                            line-height: 1.75rem;
                            width: 4.05rem;
                            font-size: 0.68rem;
                            /*padding:0.3rem 0;*/
                            text-align: center;
                            color: #fff;
                            display: block;
                        }
                        .cheked {
                            background-color: #ffa033;
                        }
                        .disabel {
                            background-color: #ccc;
                        }
                    }
                }
            }
        }
    }
    .page-5 {
        background: #fff;
        h2 {
            font-size: 0.683rem;
            text-align: left;
            padding: 0.64rem;
            border-bottom: 1px solid #ddd;
        }
        .price-info {
            padding: 0 0.64rem 1.1rem;
            .total-price {
                text-align: right;
                padding: 0.64rem;
                .price,
                .old-price {
                    display: block;
                }
                .price {
                    color: #f65858;
                    font-size: 0.853rem;
                }
                .old-price {
                    color: #ddd;
                    font-size: 0.469rem;
                    padding-top: 0.15rem;
                }
            }

            .agreement {
                font-size: 0.427rem;
                padding-bottom: 0.64rem;
                .link {
                    color: #17a27f;
                }
            }
            .confirm {
                font-size: 0.78rem;
                display: block;
                margin: 0 0.64rem;
                height: 1.5rem;
                line-height: 1.5rem;
                color: #fff;
                background: #ffad3d;
                text-align: center;
                box-sizing: border-box;
                border-radius: 4px;
            }
        }
    }
}
</style>