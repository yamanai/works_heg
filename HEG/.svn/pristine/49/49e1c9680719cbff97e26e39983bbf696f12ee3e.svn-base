import { DomainManager } from '../../config/DomainManager'

export class User {

  /**
   * 
   * @param {string} firstname
   * @param {string} lastname
   * @param {string} emailAddress
   * @param {string} phoneNumber
   */
  constructor(firstName, lastName, middleName, email, cellphone, sex, address, birthDate, userId, userName) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.middleName = middleName;
    this.email = email;
    this.cellphone = cellphone;
    this.sex = sex;
    this.address = address;
    this.birthDate = birthDate;
    this.userId = userId;
    this.userName = userName;
  }

  /**
   * 
   * @param {any} vueComp
   * @param {string} username
   * @param {string} password
   * @param {boolean} ifRememberme
   */
  static login(vueComp, username, password, ifRememberme) {

    let params = new Map()
    params.set("userName", username);
    params.set("password", password);
    params.set("rememberMe", ifRememberme);

    let queryParams = DomainManager.getQueryString(params);
    let url = DomainManager.getSearchLoginURLStirng(queryParams);
    //{ credentials: true, headers: { "x-Device": "mobile" } }
    let result = vueComp.$http.get(url, { withCredentials: true, headers: { "x-Device": "mobile" } })

    return result
    //return vueComp.$http.get(url);
  }

  /**
   * 
   * @param {any} vueComp
   * @param {string} facebookid
   * @param {string} email
   * @param {string} name
   */
  static loginWithFacebookInfos(vueComp, facebookid, email, firstName, lastName) {
    let parmsMap = new Map()

    parmsMap.set('id', facebookid)
    parmsMap.set('first_name', firstName)
    parmsMap.set('last_name', lastName)
    parmsMap.set('email', email)

    let qs = DomainManager.getQueryString(parmsMap)
    let urlString = DomainManager.getLoginWithFaceBookAccountUrlString(qs)

    vueComp.$http.get(urlString).then((res) => {
        console.log(res)
      })
      .catch(err => {
        console.log(err)
      })
  }

  static getUserOrders(vueComp) {

    return new Promise((resolve, reject) => {
      vueComp.$http.get(DomainManager.getUserOrdersUrlString(), { withCredentials: true })
        .then(res => {
          res.json()
            .then(json => {
              resolve(json)
            })
            .catch(err => reject(err))
        })
        .catch(err => reject(err))
    })
  }

  static loadUser(vueComp) {
    //, { credentials: true } ,{ 'x-Device': 'PC' }, { credentials: true }
    //  let url =  DomainManager.getUserInfoUrlString()
    return new Promise((resolve, reject) => {
      vueComp.$http.get(DomainManager.getUserInfoUrlString(), { withCredentials: true }).then(res => {
        res.json()
          .then(json => {
            let { firstName, lastName, middleName, email, cellphone, sex, address, birthDate, userId, userName } = json;
            resolve(new User(firstName, lastName, email, cellphone, middleName, sex, address, birthDate, userId, userName))
          })
      }).catch(err => reject(err))
    })
  }

  static changeUserInfo(vueComp, String) {
    return new Promise((resolve, reject) => {
      vueComp.$http.post(DomainManager.changeUserInfo(String), { withCredentials: true }).then(
        res => {
          res.json().then(
              json => {
                resolve(json)
              }
            )
            .catch(err => {
              reject(err)
            })
        }
      ).catch(err => {
        reject(err)
      })
    })
  }

  static changeUserPassword(vueComp, String) {
    return new Promise((resolve, reject) => {
      vueComp.$http.post(DomainManager.changeUserPassword(String)).then(
        res => {
          res.json().then(json => {
            resolve(json)
          }).catch(err => {
            reject(err)
          })
        }
      ).catch(err => {
        reject(err)
      })
    })
  }

  static pushFeedback(vueComp, String) {
    return new Promise((resolve, reject) => {
      vueComp.$http.post(DomainManager.feedback(String)).then(
        res => {
          res.json().then(json => {
            resolve(json)
          }).catch(err => {
            reject(err)
          })
        }
      ).catch(err => {
        reject(err)
      })
    })
  }

  static getGold(vueComp) {
    return new Promise((resolve, reject) => {
      vueComp.$http.get(DomainManager.balanceOfGold(), { withcredentials: true }).then(res => {
        resolve(res.body)
      }, res => {
        reject(res)
      }).catch(err => {
        reject(err);
      })
    })
  }
  checkCoinRemian() {



  }

  logout() {

  }
}