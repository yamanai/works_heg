<template>
	<div class="wrapper">
		<head-top>
			<i slot="left" class="prev iconfont icon-back" @click="$router.go(-1)"></i>
			<div slot="title" class="title">Payment Confirm</div>
			<img slot="right" :src="require('../../assets/images/flight-prev.png')" class="placeholder">
		</head-top>
		<div class="container">
			<div class="content">
				<div class="fare">
					<h2 class="title">Fare breack up</h2>
					<div class="list-wrapper">
						<div class="fare-cont">
							<div class="list flex space-between">
								<span>Base Fare</span>
								<span>
									<i class="rs">Rs.</i>{{travelFee | formatDate}}</span>
							</div>
							<div class="list flex space-between">
								<span>Taxes&amp;Fees</span>
								<span>
									<i class="rs">Rs.</i> {{taxFee | formatDate}}</span>
							</div>
							<div class="list flex space-between">
								<span id>Customer Prom.</span>
								<span v-if="ifCashback">
									<i class="rs">Rs.</i>0
								</span>
								<span v-else>
									<i class="rs">Rs.</i>-{{discount | formatDate}}
								</span>
							</div>
							<div class="list flex space-between">
								<span>Convenience Fee</span>
								<span>
									<i class="rs">Rs.</i> {{flightOrder.serviceFee | formatDate}}</span>
							</div>
							<div class="total flex space-between">
								<span>Gold Total</span>
								<span v-if="ifCashback" class="price">
									<i class="rs">Rs.</i> {{totalCount - goldVal | formatDate}}
								</span>
								<span v-else class="price">
									<i class="rs">Rs.</i> {{totalCount - goldVal | formatDate}}
								</span>
							</div>
						</div>

						<div class="offers-group" v-if="isLogin">
							<div class="radio-group flex content-start align-items-center" @click="radio3">
								<div class="ug" v-if="this.sesessionStorageUser.payPassword != ''">
									<div class="round1">
										<div :class="{round2:isSelect}"></div>
									</div>
									<p :class="{yellow:isSelect}">Use my Happy Gold
										<span>Rs.{{goldTotal}}</span>
									</p>
								</div>
								<div class="log" v-else>
									<p>you need to
										<a href="javascript:;" @click="$router.push('/security')">reset</a>your payPassword</p>
								</div>

							</div>
							<div class="input-group flex content-start align-items-center" v-show="isSelect">
								<input type="number" ref="gold" v-model.number="goldVal" :class="{yellowborder:isSelect}">
							</div>
							<div class="input-group flex content-start align-items-center" v-show="isSelect">
								<input type="text" placeholder="Payment password" v-model="password" :class="{yellowborder:isSelect}">
							</div>
						</div>

						<p>By booking with Happy Easy go,you agreen to our
							<span @click="$router.push('/agreement')">T&amp;C</span>
						</p>
						<div class="done">
							<button class="btn" @click="validatInfo">Make payment</button>
							<mt-button class="btn" id="creditPay" type="primary" v-show='false'>Make Payment</mt-button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</template>
<script>
import headTop from '../../components/head/head.vue'
import { FlightOrder, OnewayOrder, RoundTripOrder } from '../../models/flightorder'
import { Toast, Indicator } from 'mint-ui';
import { GetFlightOrderUtil, CookieUtil } from '../../models/utils';
import { User } from 'models/user';
export default {
	components: {
		headTop
	},
	data() {
		return {
			isSelect: false,
			goldVal: 0,
			goldTotal: 0,
			password: '',
			ifCashback: false
		}
	},
	methods: {
		validatInfo() {
			let self = this;
			Indicator.open({ spinnerType: 'fading-circle' });
			// let flightOrder = this.$store.getters.flightOrder;
			let flightOrder = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)

			flightOrder.saveOrder(this).then((res) => {
				flightOrder.orderNumber = res.orderId
				flightOrder.goldInfo = {
					tradeType: 4,
					tradeAmount: self.goldVal,
					paymentPass: self.password,
				};
				flightOrder.isUseCash = self.isSelect;
				//Monitor code start
				let oFlight = JSON.parse(sessionStorage.getItem('order'));
				let arr = [];
				for (let o in oFlight) {
					let quantity = oFlight.adults.length + oFlight.children.length + oFlight.infants.length;
					switch (o) {
						case "departFlight":
						case "returnFlight":
							let airportInfo = oFlight[o].stops[0].departAirportName;
							for (let el of oFlight[o].stops) {
								airportInfo += ('-' + el.arrivalAirportName);
							}
							arr.push({
								'sku': oFlight[o].stops[0].flightNumber + "-" + oFlight[o].stops[0].departDate,
								'name': airportInfo,
								'category': oFlight[o].stops[0].flightNumber.slice(0, 2),
								'price': oFlight[o].price / quantity,
								'quantity': quantity
							})
							break;
					}
				}
				// window.dataLayer.push({
				// 	'transactionId': flightOrder.orderNumber,
				// 	'transactionTotal': self.totalCount,
				// 	'transactionTax': self.taxFee,
				// 	'transactionShipping': flightOrder.serviceFee,
				// 	'transactionProducts': arr
				// })
				document.getElementById('creditPay').click();
				//Monitor code end

				GetFlightOrderUtil.setOrderIntoSession(flightOrder, sessionStorage)

				flightOrder.requestPaymentOrderInfo(self).then((res) => {
					flightOrder.makePayment(window, res, sessionStorage);
				}, (err) => {
					console.log(err)
					Indicator.close()
				})
			}, (error) => {
				console.log(error)
				Indicator.close()
				Toast("network anomaly")
			});
		},
		radio3() {
			this.isSelect = !this.isSelect;
			if (this.isSelect == true) {

			}
		}
	},
	watch: {
		goldVal(val) {
			this.goldVal = Math.min.apply(null, [val, (this.totalCount - this.discount), this.goldTotal]);
		}
	},
	computed: {
		isLogin() {
			return Boolean((new CookieUtil()).getItem('uuid'));
		},
		totalCount: {
			get: function() {
				let order = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
				if (this.ifCashback) {
					var totalPrice = order.departFlight.showCashbackPrice;
				} else {
					var totalPrice = order.departFlight.showPrice;
				}
				if (order.returnFlight != undefined && order.returnFlight != null) {
					if (this.ifCashback) {
						var returnCount = order.returnFlight.showCashbackPrice;
						totalPrice += returnCount
					} else {
						var returnCount = order.returnFlight.showPrice;
						totalPrice += returnCount
					}

				}
				totalPrice += order.serviceFee;
				order.totalPrice = totalPrice;
				return totalPrice;
			}
		},
		travelFee() {
			let p = 0
			let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			if (f instanceof (OnewayOrder)) {
				p = f.departFlight.obfp;
			} else if (f instanceof (RoundTripOrder)) {
				p = f.departFlight.obfp + f.returnFlight.obfp;
			}
			return p
		},
		taxFee() {
			let p = 0
			let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			if (f instanceof (OnewayOrder)) {
				p = f.departFlight.ogst;
			} else if (f instanceof (RoundTripOrder)) {
				p = f.departFlight.ogst + f.returnFlight.ogst;
			}
			return p
		},
		discount() {
			let p = 0
			let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			if (f instanceof (OnewayOrder)) {
				p = f.departFlight.commonDiscount + f.departFlight.couponDiscount + f.departFlight.airlineDIS;
			} else if (f instanceof (RoundTripOrder)) {
				p = f.departFlight.commonDiscount + f.returnFlight.commonDiscount + f.departFlight.couponDiscount + f.returnFlight.couponDiscount + f.departFlight.airlineDIS + f.returnFlight.airlineDIS;
			}
			debugger
			return p
		},
		flightOrder() {
			let order = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			return order
		},
		sesessionStorageUser() {
			if (sessionStorage.user) {
				return JSON.parse(sessionStorage.user);
			} else {
				return false;
			}
		}
	},
	mounted() {
		console.log(this.flightOrder)
	},
	created() {
		let self = this;
		User.getGold(self).then(res => {
			self.goldTotal = Number(res.happyGoldBalance);
		})

		if (JSON.parse(sessionStorage.returnCash)) {
			this.ifCashback = true;
		} else {
			this.ifCashback = false;
		}
	}
}
</script>
<style lang="less" scoped>
@import './content.less';
</style>
