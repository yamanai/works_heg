import { DomainManager } from '../../config/DomainManager';
import * as types from '../../vuex/types/types.js';

export class Coupon {
  constructor(
    cf,
    couponCode,
    airlineCode,
    discountMethods,
    discountCeiling,
    limitDiscount,
    rebates,
    keepMoney,
    applyTyle,
    personNum,
    minOrderPrice,
    bfpLimit,
    useTime,
    upperLimit,
    lowerLimit,
    couponPrice,
    couponReturnPrice
  ) {
    this.cf = cf;
    this.couponCode = couponCode;
    this.airlineCode = airlineCode;
    this.discountMethods = discountMethods;
    this.discountCeiling = discountCeiling;
    this.limitDiscount = limitDiscount;
    this.rebates = rebates;
    this.keepMoney = keepMoney;
    this.applyTyle = applyTyle;
    this.personNum = personNum;
    this.minOrderPrice = minOrderPrice;
    this.bfpLimit = bfpLimit;
    this.useTime = useTime;
    this.upperLimit = upperLimit;
    this.lowerLimit = lowerLimit;
    this.couponPrice = 0;
    this.couponReturnPrice = 0;
    this.valid = false;
  }

  getDiscountPrice(vueComp, flight) {
    let flightOrder = vueComp.$store.getters.flightOrder;
    let num =
      flightOrder.adults.length +
      flightOrder.children.length +
      flightOrder.infants.length;
    let discount = 0;
    let newFlight = [];
    // v8 v9 pirce + cf limit
    if (this.lowerLimit != null && this.upperLimit != null) {
      if (
        !(
          flightOrder.returnFlight &&
          this.lowerLimit <
            flightOrder.departFlight.price +
              flightOrder.returnFlight.price +
              this.cf.rcf &&
          flightOrder.departFlight.price +
            flightOrder.returnFlight.price +
            this.cf.rcf <
            this.upperLimit &&
          this.lowerLimit < flightOrder.departFlight.price + this.cf.ocf &&
          flightOrder.departFlight.price + this.cf.ocf < this.upperLimit
        ) ||
        !(
          !flightOrder.returnFlight &&
          this.lowerLimit < flightOrder.departFlight.price + this.cf.ocf &&
          flightOrder.departFlight.price + this.cf.ocf < this.upperLimit
        )
      ) {
        flight.forEach(el => {
          let cbfp = el.bfp;
          if (this.applyTyle != 1) {
            return;
          }
          if (
            (this.airlineCode == "*" ||
              this.airlineCode.indexOf(el.airline.shortname) > -1) &&
            cbfp >= this.minOrderPrice
          ) {
            // k8 discount price limit
            if (this.limitDiscount != null) {
              if (
                flightOrder.returnFlight &&
                flightOrder.departFlight.showPrice +
                  flightOrder.returnFlight.showPrice -
                  flightOrder.departFlight.price -
                  flightOrder.returnFlight.price >
                  this.limitDiscount
              ) {
                flightOrder.limitDiscount = this.limitDiscount;
              }
              if (
                flightOrder.departFlight.showPrice -
                  flightOrder.departFlight.price >
                this.limitDiscount
              ) {
                flightOrder.limitDiscount = this.limitDiscount;
              }
            }

            if (this.discountMethods == 1) {
              this.discountCeiling = this.discountCeiling || -1000000000;
              let couponPrice = Math.ceil(
                this.personNum == 1
                  ? cbfp * (this.rebates / 100) + this.keepMoney * num
                  : cbfp * (this.rebates / 100) + this.keepMoney
              );
              let discountCeiling =
                this.personNum == 1
                  ? this.discountCeiling * num
                  : this.discountCeiling;
              discount =
                Math.abs(couponPrice) > Math.abs(discountCeiling)
                  ? discountCeiling
                  : couponPrice;
              el.couponDiscount = Math.abs(discount);
              this.couponPrice = Math.abs(discount);
              if (flightOrder.returnFlight) {
                this.couponReturnPrice = Math.abs(discount);
              }
              this.valid = true;
            }
          }
        });
      } else {
        this.couponPrice = 0;
        this.couponReturnPrice = 0;
        this.valid = false;
      }
    } else {
      flight.forEach(el => {
        let cbfp = el.bfp;
        if (this.applyTyle != 1) {
          return;
        }
        if (
          (this.airlineCode == "*" ||
            this.airlineCode.indexOf(el.airline.shortname) > -1) &&
          cbfp >= this.minOrderPrice
        ) {
          // k8 discount price limit
          if (this.limitDiscount != null) {
            if (
              flightOrder.returnFlight &&
              flightOrder.departFlight.showPrice +
                flightOrder.returnFlight.showPrice -
                flightOrder.departFlight.price -
                flightOrder.returnFlight.price >
                this.limitDiscount
            ) {
              flightOrder.limitDiscount = this.limitDiscount;
            }
            if (
              flightOrder.departFlight.showPrice -
                flightOrder.departFlight.price >
              this.limitDiscount
            ) {
              flightOrder.limitDiscount = this.limitDiscount;
            }
            // vueComp.$store.commit(OrderMutaionNames.setupOrder, flightOrder);
          }

          if (this.discountMethods == 1) {
            this.discountCeiling = this.discountCeiling || -1000000000;
            let couponPrice = Math.ceil(
              this.personNum == 1
                ? cbfp * (this.rebates / 100) + this.keepMoney * num
                : cbfp * (this.rebates / 100) + this.keepMoney
            );
            let discountCeiling =
              this.personNum == 1
                ? this.discountCeiling * num
                : this.discountCeiling;
            discount =
              Math.abs(couponPrice) > Math.abs(discountCeiling)
                ? discountCeiling
                : couponPrice;
            el.couponDiscount = Math.abs(discount);
            this.couponPrice = Math.abs(discount);
            if (flightOrder.returnFlight) {
              this.couponReturnPrice = Math.abs(discount);
            }
            this.valid = true;
          }
        }
      });
    }
  }

  buildDiscount(vueComp) {
    console.log(vueComp.flightOrder);
    let coupon = {
      [this.discountMethods]: {
        tradeType: this.discountMethods,
        tradeAmount: vueComp.flightOrder.returnFlight
          ? vueComp.flightOrder.departFlight.couponDiscount +
            vueComp.flightOrder.returnFlight.couponDiscount
          : vueComp.flightOrder.departFlight.couponDiscount,
        config: {
          k1: this.couponCode
        }
      }
    };
    console.log(this.couponPrice);
    vueComp.$store.commit(types.GET_COUPON, coupon);
  }

  static buildCoupon(res) {
    return new Coupon(
      res.cf,
      res.k1,
      res.k2,
      res.k5,
      res.k7,
      res.k8,
      res.v1Int,
      res.v2Int,
      res.v3,
      res.v4,
      res.v5,
      res.v6,
      res.v7,
      res.v8,
      res.v9
    );
  }

  static getCoupon(vueComp, code) {
    let map = new Map();
    map.set("k1", code.toUpperCase());
    let url = DomainManager.getCouponURLString(
      DomainManager.getQueryString(map)
    );

    return new Promise((resolve, reject) => {
      vueComp.$http
        .get(url)
        .then(res => {
          res
            .json()
            .then(jsonObj => {
              resolve(jsonObj);
            })
            .catch(err => {
              reject(err);
            });
        })
        .catch(err => {
          reject(err);
        });
    });
  }
}
