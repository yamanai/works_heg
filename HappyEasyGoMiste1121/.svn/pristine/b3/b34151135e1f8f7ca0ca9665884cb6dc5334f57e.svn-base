<template>
	<div class="wrapper">
		<head-top>
			<img slot="left" :src="require('../../assets/images/flight-prev.png')" class="prev" @click="$router.go(-1)">
			<div slot="title" class="title">Payment Confirm</div>
			<img slot="right" :src="require('../../assets/images/flight-prev.png')" class="placeholder">
		</head-top>
		<div class="container">
			<div class="content">
				<div class="fare">
					<h2 class="title">Fare breack up</h2>
					<div class="list-wrapper">
						<div class="fare-cont">
							<div class="list flex space-between">
								<span>Base Fare</span>
								<span>
									<i class="rs">Rs.</i>{{travelFee | formatDate}}</span>
							</div>
							<div class="list flex space-between">
								<span>Taxes&amp;Fees</span>
								<span>
									<i class="rs">Rs.</i> {{taxFee | formatDate}}</span>
							</div>
							<div class="list flex space-between">
								<span>Convenience Fee</span>
								<span>
									<i class="rs">Rs.</i> {{flightOrder.serviceFee | formatDate}}</span>
							</div>
							<div class="list flex space-between">
								<span id>Customer Prom.</span>
								<span>
									<i class="rs">Rs.</i>-{{discount | formatDate}}</span>
							</div>
							<div class="total flex space-between">
								<span>Gold Total</span>
								<span class="price">
									<i class="rs">Rs.</i> {{totalCount - discount | formatDate}}</span>
							</div>
						</div>
					</div>
	
				</div>
				<p>By booking with Happy Easy go,you agreen to our
					<span @click="$router.push('/agreement')">T&amp;C</span>
				</p>
				<div class="payment-type">
					<div class="radio-group flex content-start align-items-center" @click="radio1">
						<div class="round1">
							<div :class="{round2:isSelecA}"></div>
						</div>
						<p :class="{yellow:isSelecA}">Use my Happy Gold
							<i class="rs">Rs.</i>
						</p>
					</div>
					<div class="form-group">
						<input class="gold" type="text">
						<span>
							<i class="rs">Rs.</i>
						</span>
					</div>
				</div>
	
				<div class="done">
					<mt-button @click="validatInfo" class="btn" type="primary">Make Payment</mt-button>
					<mt-button class="btn" id="creditPay" type="primary" v-show='false'>Make Payment</mt-button>
				</div>
			</div>
		</div>
	</div>
</template>
<script>
import headTop from '../../components/head/head.vue'
import { FlightOrder, OnewayOrder, RoundTripOrder } from '../../models/flightorder'
import { Toast, Indicator } from 'mint-ui';
import { GetFlightOrderUtil } from '../../models/utils'
export default {
	components: {
		headTop
	},
	data() {
		return {
			isSelec: false
		}
	},
	methods: {
		validatInfo() {
			let self = this;
			Indicator.open({ spinnerType: 'fading-circle' });
			let flightOrder = this.$store.getters.flightOrder;
			flightOrder.saveOrder(this).then((res) => {
				flightOrder.orderNumber = res.orderId
				//Monitor code start
				let oFlight = JSON.parse(sessionStorage.getItem('order'));
				let arr = [];
				for (let o in oFlight) {
					let quantity = oFlight.adults.length + oFlight.children.length + oFlight.infants.length;
					switch (o) {
						case "departFlight":
						case "returnFlight":
							let airportInfo = oFlight[o].stops[0].departAirportName;
							for (let el of oFlight[o].stops) {
								airportInfo += ('-' + el.arrivalAirportName);
							}
							arr.push({
								'sku': oFlight[o].stops[0].flightNumber + "-" + oFlight[o].stops[0].departDate,
								'name': airportInfo,
								'category': oFlight[o].stops[0].flightNumber.slice(0, 2),
								'price': oFlight[o].price / quantity,
								'quantity': quantity
							})
							break;
					}
				}
				window.dataLayer.push({
					'transactionId': flightOrder.orderNumber,
					'transactionTotal': self.totalCount,
					'transactionTax': self.taxFee,
					'transactionShipping': flightOrder.serviceFee,
					'transactionProducts': arr
				})
				document.getElementById('creditPay').click();
				//Monitor code end

				GetFlightOrderUtil.setOrderIntoSession(flightOrder, sessionStorage)

				flightOrder.requestPaymentOrderInfo(self).then((res) => {
					flightOrder.makePayment(window, res, sessionStorage);
				}, (err) => {
					console.log(err)
					Indicator.close()
				})
			}, (error) => {
				console.log(error)
				Indicator.close()
				Toast("network anomaly")
			});
		}
	},
	computed: {

		totalCount: {
			get: function () {
				let order = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
				let totalPrice = order.departFlight.showPrice;
				if (order.returnFlight != undefined && order.returnFlight != null) {
					let returnCount = order.returnFlight.showPrice;
					totalPrice += returnCount
				}
				totalPrice += order.serviceFee;
				order.totalPrice = totalPrice;
				return totalPrice;
			}
		},
		travelFee() {
			let p = 0
			let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			if (f instanceof (OnewayOrder)) {
				p = f.departFlight.obfp;
			} else if (f instanceof (RoundTripOrder)) {
				p = f.departFlight.obfp + f.returnFlight.obfp;
			}
			return p
		},
		taxFee() {
			let p = 0
			let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			if (f instanceof (OnewayOrder)) {
				p = f.departFlight.gst
			} else if (f instanceof (RoundTripOrder)) {
				p = f.departFlight.gst + f.returnFlight.gst
			}
			return p
		},
		discount() {
			let p = 0
			let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
			if (f instanceof (OnewayOrder)) {
				p = f.departFlight.commonDiscount + f.departFlight.couponDiscount + f.departFlight.airlineDIS;
			} else if (f instanceof (RoundTripOrder)) {
				p = f.departFlight.commonDiscount + f.returnFlight.commonDiscount + f.departFlight.couponDiscount + f.returnFlight.couponDiscount + f.departFlight.airlineDIS + f.returnFlight.airlineDIS;
			}
			return p
		},
		flightOrder() {

			let order = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)

			return order
		}
	},
	mounted() {
		let f = GetFlightOrderUtil.getOrderFromSession(this, sessionStorage)
	}
}
</script>
<style lang="less" scoped>
.selected {
	border-color: #ffad3d!important;
	background: #ffad3d url('../../assets/images/sure.png') center no-repeat;
	background-size: contain;
}

.header {
	background: #f7f7f8;
	.title {
		line-height: 2.04rem;
		font-size: 0.768rem;
		color: #000;
	}
	.placeholder {
		opacity: 0;
	}
}

.content {
	padding-top: 2.04rem;
	.list-wrapper {
		padding: 0 0.64rem;
	}
}

.fare {
	.title {
		font-size: 0.68rem;
		color: #666;
		text-align: left;
		padding: 0.64rem;
		border-bottom: 1px solid #ccc;
	}
	.fare-cont {
		background-color: #fff;
		border-radius: 0.4rem;
		padding: 0.4rem;
		.list {
			border-bottom: 1px solid #ccc;
		}
		.list,
		.total {
			font-size: 0.6rem;
			color: #666;
			height: 1.4rem;
			line-height: 1.4rem;
			span {
				display: block;
				text-align: left;
			}
		}
		.total {
			font-size: 0.768rem;
			color: #333;
			padding: 0.2rem 0rem;
			.price {
				color: red;
			}
		}
	}
}

.payment-type {
	padding: 0 0.64rem;
	.form-group {
		input {
			border: 1px solid #ccc;
		}
	}
}

.radio-group {
	padding: 0.426rem 0;
	.round1 {
		width: 0.6rem;
		height: 0.6rem;
		border-radius: 50%;
		border: 1px solid #ccc;
		position: relative;
		margin-right: 0.3rem;
		.round2 {
			width: 0.3rem;
			height: 0.3rem;
			border-radius: 50%;
			background-color: #ffa033;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translateY(-50%) translateX(-50%);
			-webkit-transform: translateY(-50%) translateX(-50%);
		}
	}
}

p {
	font-size: 0.5rem;
	color: #666;
	line-height: 1rem;
	span {
		color: #0bb78f;
	}
}

.done {
	.btn {
		width: 100%;
		font-size: 0.768rem;
		color: #fff;
		height: 1.87rem;
		margin-top: 2rem;
		border-radius: 6px;
		background-color: #ffad3d;
		display: inline-block;
		cursor: pointer;
	}
}
</style>
