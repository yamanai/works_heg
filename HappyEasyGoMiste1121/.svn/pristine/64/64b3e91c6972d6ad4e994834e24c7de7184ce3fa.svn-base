<template>
	<div class="wrapper">
		<head-top class="header">
			<i slot="left" class="iconfont icon-back" @click="goBack"></i>
			<span slot="title">Sign in</span>
			<img class="placeholder" slot="right" alt="">
		</head-top>
	
		<div class="container-login flex content-center">
			<div class="login">
				<div class="logo">
					<a v-show="false" id="facebook" @click="signinWithFacebookAccount"></a>
					<!-- <a id="twitter"></a> -->
				</div>
				<div class="top-content">
					<div class="text">
						<p>There are lots of Cashback Rewards and Discount after you sign in</p>
					</div>
					<div class="avatar">
						<i class="iconfont icon-account"></i>
					</div>
				</div>
				<div class="user">
					<div class="form-group flex space-bewteen align-items-center">
						<i class="iconfont icon-user"></i>
						<input type="text" v-model="username" placeholder="Enter your email address">
					</div>
					<div class="form-group flex space-bewteen align-items-center">
						<i class="iconfont icon-password"></i>
						<input type="password" v-model="password" placeholder="Enter your password">
					</div>
				</div>
				<div class="refer">
					<div class="signin">
						<a @click="sign">Sign in</a>
					</div>
					<div class="register">
						<router-link to="/register">Sign up</router-link>
					</div>
				</div>
			</div>
		</div>
	</div>
</template>
<script>
import headTop from '../../components/head/head.vue'
import Toast from 'mint-ui/lib/toast';
import { Indicator } from 'mint-ui'
import { FaceBookApi, authories, loginStatus } from '../../models/facebookapi'
import { User } from '../../models/user'
import * as XUser from '../../vuex/models/user/XUser.js'

var _fb = new FaceBookApi()



export default {
	components: {
		headTop
	},
	data() {
		return {
			isLogin: false,
			username: '',
			password: ''
		}
	},
	methods: {
		goBack() {
			Indicator.close();
			this.$router.push('/');
		},
		sign() {
			let self = this;
			if (Object.is(this.username.trim(), '')) {
				Toast({
					message: 'Please enter correct Email Adress',
					duration: 1000
				});
			} else if (Object.is(this.password, '')) {
				Toast({
					message: 'Plaese enter password',
					duration: 1000
				});
			} else {
				Indicator.open({
					spinnerType: 'fading-circle'
				});
				User.login(self, self.username, self.password, true).then(res => {
					res.json().then((jsonObj) => {
						if (jsonObj.success) {
							console.log(jsonObj);
							Indicator.close()
							self.$router.push('/account');
						} else {
							Indicator.close()
							Toast(jsonObj.msg);
						}
					}).catch(err => console.log(err));

				}).catch(err => {
					console.log(err);
					Indicator.close();
					Toast({
						message: 'Login failed',
						duration: 1000
					});
				});
			}
		},
		signinWithFacebookAccount() {
			_fb.getLoginStatus(response => {
				let status = response.status
				let athorObj = response.authResponse
				switch (status) {
					case loginStatus.CONNECTED:
						_fb.getUserInfo(res => {
							User.loginWithFacebookInfos(this, res.id, res.email, res.first_name, res.last_name)
						})
						break
					case loginStatus.AUTH_RESPONSE:
						_fb.getUserInfo(res => {
							User.loginWithFacebookInfos(this, res.id, res.email, res.first_name, res.last_name)
						})
						break
					default:
						_fb.login([authories.PUBLIC_PROFILE, authories.EMAIL], (res) => {
							_fb.getUserInfo(res => {
								User.loginWithFacebookInfos(this, res.id, res.email, res.first_name, res.last_name)
							})
						})
						break
				}
			})
		}
	}
}
</script>
<style lang="less" scoped>
// @import '../../../node_modules/mint-ui/lib/style.css';
.header {
	background: #0b9d78;
	position: absolute;
	top: 0;
}

.top-content {
	margin-top: 2.04rem;
	.text {
		font-size: 0.427rem;
		padding: 0.64rem 0rem;
	}
	.avatar {
		width: 4.05rem;
		height: 4.05rem;
		margin: 0 auto;
		border: 2px solid #ddd;
		border-radius: 50%;
		overflow: hidden;
		i {
			display: block;
			font-size: 3rem;
			color: #999;
			margin-top: 1.5rem;
		}
	}
}

.container-login {
	width: 100%;
	height: 100%;
	.login {
		padding: 0 1.28rem;
		.logo {
			#facebook {
				width: 13.46rem;
				height: 1.8rem;
				margin-top: 0.6rem;
				display: block;
				background: url('../../assets/images/login/fbsignin.png') center no-repeat;
				background-size: cover;
				border-radius: 0.2rem;
			}
			#twitter {
				width: 13.46rem;
				height: 1.8rem;
				display: block;
				background: url('../../assets/images/login/twsignin.png') center no-repeat;
				background-size: cover;
				margin-top: 0.42rem;
				border-radius: 0.2rem;
			}
		}
	}
	.user {
		padding-top: 2rem;
		.form-group {
			width: 100%;
			box-sizing: border-box;
			margin-bottom: 0.4rem;
			border-radius: 4px;
			border: 1px solid #ddd;
			i {
				color: #ddd;
				padding: 0 0.32rem;
			}
			input {
				width: 100%;
				font-size: 0.64rem;
				padding: 0.45rem 0.45rem 0.45rem 0;
				box-sizing: border-box;
				background-size: 0.9rem;
			}
		}
	}

	::-webkit-input-placeholder {
		color: #ccc;
		font-size: 0.6rem;
	}

	::-moz-placeholder {
		color: #ccc;
		font-size: 0.6rem;
	}

	:-moz-placeholder {
		color: #ccc;
		font-size: 0.6rem;
	}

	.refer {
		input {
			width: 12.8rem;
			height: 1.8rem;
			border-radius: 0.2rem;
			color: #fff;
			font-size: 0.68rem;
		}
		.signin {
			margin: 0.85rem 0 0.4rem;
			a {
				background-color: #ffad3d;
				width: 100%;
				height: 1.8rem;
				line-height: 1.8rem;
				border-radius: 4px;
				color: #fff;
				font-size: 0.68rem;
				display: inline-block;
			}
		}
		.register {
			display: none;
			a {
				box-sizing: border-box;
				font-size: 0.68rem;
				width: 12.8rem;
				height: 1.8rem;
				line-height: 1.8rem;
				border-radius: 0.2rem;
				background-color: #f0eff5;
				border: 1px solid #ffad3d;
				color: #ffad3d;
				display: inline-block;
			}
		}
	}
}
</style>