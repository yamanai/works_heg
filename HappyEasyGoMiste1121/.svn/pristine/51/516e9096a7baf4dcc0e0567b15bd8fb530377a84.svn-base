<template>
	<div class="wrapper">
		<head-top class="head">
			<i slot="left" class="iconfont icon-back" @click="$router.go(-1)"></i>
			<div slot="title" class="title flex" v-for="(item,index) in orders" v-if="index==0" :key="item.id">
				<h2>{{departCity}}</h2>
				<div class="title-img">
					-
				</div>
				<h2>{{ariveCity}}</h2>
			</div>
			<i class="sp iconfont icon-back" slot="right"></i>
		</head-top>
		<div class="container">
			<div class="content">
				<div class="flight-info">
					<div class="dates" v-show="ispasetime">
						<h2>
							<span>Fares change rapidly</span>
						</h2>
						<p class="sp">It will take a few minutes to process your payment. If you have completed payment, please do not make payment again.</p>
						<p>So please complete the</p>
						<p>Payment process before
							<span>{{expirationTime}}(IST)</span>
						</p>
						<p class="tripid">
							Trip Id:{{orderInfo.id}}
						</p>
					</div>
					<flight-info :orders="orders"></flight-info>
					<bg></bg>
					<fareDetail :orders="orders" :fee="fee"></fareDetail>
					<!-- <orderAction :orders="orders" v-show="showAction"></orderAction> -->
				</div>
			</div>
		</div>
		<payment class="payment" :ispasetime="showPay" :orders="orders"></payment>
	</div>
</template>
<script>
import headTop from '../../../components/head/head.vue'
import payment from './base/payment.vue'
import flightInfo from './base/flightInfo.vue'
import traveller from './base/traveller.vue'
import fareDetail from './base/fareDetail'
// import orderAction from './base/orderAction'
// import orderRtAction from './base/orderRtAction'

import bg from './base/bg.vue'

export default {
	components: {
		headTop,
		payment,
		flightInfo,
		traveller,
		fareDetail,
		// orderAction,
		// orderRtAction,
		bg,
	},
	data() {
		return {
			orders: [],
			fee: '',
			ifPay: '',
			showAction: false
		}
	},
	computed: {
		orderInfo() {
			if (this.orders) {
				return this.orders[0];
			} else {
				return ''
			}
		},
		ispasetime() {
			if (this.orders.length != 0) {
				let creatTime = new Date(this.orders[0].creatTime + 15 * 60 * 1000).getTime();
				let curTime = new Date().getTime();
				return creatTime > curTime ? true : false;
			}

		},
		showPay() {
			return this.ifPay == 107 ? true : false;
		},
		expirationTime() {
			let creatTime = null;
			if (this.orders.length > 0) {
				creatTime = new Date(this.orders[0].creatTime);
				let year = creatTime.getFullYear();
				let month = creatTime.getMonth() + 1;
				let date = creatTime.getDate();
				let hour = creatTime.getHours();
				let minute = creatTime.getMinutes() + 15;
				// let minute = creatTime.getMinutes();

				let second = creatTime.getSeconds();
				if (minute > 59) {
					minute -= 59;
					hour += 1;
					if (hour > 24) {
						hour = 0;
					}
				}
				return (date + '/' + month + '/' + year + ',' + hour + ':' + minute + ':' + second)
			}
		},
		departCity() {
			if (this.orders.length != 0) {
				return this.orders[0].voyageinfo[0].dc;
			}
		},
		ariveCity() {
			if (this.orders.length != 0) {
				return this.orders[0].voyageinfo[this.orders[0].voyageinfo.length - 1].ac;
			}
		}
	},
	created() {
		// this.orders = this.$store.getters.orderDetail;
		// if (!this.orders) {
		// 	this.orders = JSON.parse(sessionStorage.getItem('orders'));
		// }
		this.orders = JSON.parse(sessionStorage.getItem('orders'));
		this.fee = JSON.parse(sessionStorage.getItem('orderFee')).fee;
		this.ifPay = this.orders[0].ticketsinfo[0][0].status;
	},
	methods: {
		isEnter() {
			for (var i in this.orders) {
				for (var y in this.orders[i].travellerinfo) {
					if (this.orders[i].travellerinfo[y].status == 1 && this.orders[0].ticketsinfo[0][0].ticketno) {
						this.showAction = true;
					}
				}
			}
		}
	},
	mounted() {
		this.isEnter();
	}
}
</script>
<style lang="less" scoped>
.head {
	background: #0b9d78!important;
	.title {
		h2 {
			font-size: 0.768rem;
			color: #fff;
		}
		.title-img {
			width: 1.2rem;
			height: 2.04rem;
			line-height: 2.04rem;
			padding: 0 0.2rem;
			img {
				margin-top: 4px;
				width: 1rem;
			}
		}
	}
	.sp {
		opacity: 0;
	}
}

.container {
	overflow: auto;
	.content {
		padding: 3.1rem 0.68rem 0rem;
	}
	.flight-info {
		.dates {
			// padding-bottom: 0.8rem;
			h2 {
				font-size: 0.68rem;
				color: #333;
				padding: 0.2rem 0;
				span {
					// padding-left: 1.2rem;
					// background: url('../../../assets/images/order/paid_03.png') left no-repeat;
					background-size: 0.68rem;
				}
			}
			.sp {
				color: red;
			}
			p {
				// text-align: left;
				font-size: 0.52rem;
				color: #666;
				padding-top: 0.2rem;
				span {
					font-size: 0.56rem;
					color: #333;
				}
			}
			.tripid {
				padding-top: 0.4rem;
				text-align: left;
				padding-bottom: 0.2rem;
			}
		}
	}
	.traveller {
		background-color: #fff;
		border-radius: 0.4rem;
		margin-top: 0.6rem;
		.title {
			h2 {
				font-size: 0.6rem;
				color: #333;
				text-align: left;
				span {
					font-size: 0.68rem;
					padding: 0 0.2rem;
				}
			}
		}
		ul>li {
			h2 {
				font-size: 0.6rem;
				color: #333;
				text-align: left;
				padding: 0.4rem 0;
				span {
					padding-right: 0.2rem;
				}
			}
		}
	}
}

.payment {
	position: fixed;
	bottom: 0;
	-webkit-overflow-scrolling: touch;
}

.pasetime {
	background-color: #ccc!important;
}
</style>
